#!/bin/bash

# Define constants
APP_NAME="search"
APP_PORT=8000
LOG_DIR="./var/log"
LOG_FILE="${LOG_DIR}/${APP_NAME}.log"
FLASK_CMD="flask --app $APP_NAME run --host 0.0.0.0 --port $APP_PORT"
DB_PATH="./var/search.sqlite3"
INDEX_STATUS_CMD="./bin/index status"

# Function to start the server
start_server() {
    echo "starting $APP_NAME server ..."

    # Check if the server is already running
    if pgrep -f "$FLASK_CMD" > /dev/null; then
        echo "Error: $APP_NAME server is already running"
        exit 1
    fi

    # Check if the database exists
    if [ ! -f "$DB_PATH" ]; then
        echo "Error: can't find search database $DB_PATH"
        echo "Try: ./bin/searchdb create"
        exit 1
    fi

    # Check if index server is running
    if ! $INDEX_STATUS_CMD | grep -q "index server running"; then
        echo "Error: index server is not running"
        echo "Try: ./bin/index start"
        exit 1
    fi

    # Ensure log directory exists
    mkdir -p "$LOG_DIR"
    rm -f "$LOG_FILE"

    # Start the server in the background and redirect stdout and stderr to log file
    eval "$FLASK_CMD &> \"$LOG_FILE\" &"
    echo "$APP_NAME server started"
}

# Function to stop the server
stop_server() {
    echo "stopping $APP_NAME server ..."
    pkill -f "$FLASK_CMD" || true
    echo "$APP_NAME server stopped"
}

# Function to restart the server
restart_server() {
    echo "restarting $APP_NAME server ..."
    stop_server
    start_server
}

# Function to check the server status
check_status() {
    if pgrep -f "$FLASK_CMD" > /dev/null; then
        echo "$APP_NAME server running"
    else
        echo "$APP_NAME server stopped"
        exit 1
    fi
}

# Command line argument processing
case "$1" in
    start)
        start_server
        ;;
    stop)
        stop_server
        ;;
    restart)
        restart_server
        ;;
    status)
        check_status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac
